{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nWhat is BackBee ?\n\n\nBackBee is an open-source On-page Editing system (OES). It can be used to create websites with no prior technical knowledge.\n\n\nWhat is an Open-page Editing Site?\n\n\nSimilar to content management system or CMS, an Open-page Editing Site (OES) is a software application to enter, edit and manage website with one major difference: The back office and front office is merged.\n\n\nWhat\u2019s so interesting about this?\n\n\nIt's easier and more flexible than your usual CMS. With BackBee's On-page Editing System, you can work directly on the HTML page, the page that's visible to your users. You can drag and drop page elements and move them around as you wish, adding, deleting or changing text, photos or other page elements by simply clicking on the area in question.\n\n\nThe majority of the editorial functions require no back office. BackBee is the first OES to merge back office and front office.\n\n\nWhat\u2019s this means?\n\n\nIn many content management systems, you have to shuttle between the back office \u2013 a utilitarian interface where you input your content \u2013 and a \u201cpreview\u201d mode. Only then may you\u00a0 see how the page will look on-line, as your user see it.\n\n\nBackBee lets you directly do all your inputting and editing on the page that appears to your user. Thus you get an immediate and exact idea of what the final page will look like.\n\n\nMany of BackBee's features are made possible by the unprecedented level to which it incorporates HTML5.\n\n\nKey concepts\n\n\n\n\nIt\u2019s unimaginably easy to use.\n\n\nResponsive design is native to the app.\n\n\nIt\u2019s super flexible in terms of graphic design, workflow, SEO and user access.\n\n\nIts secure, in several senses: it saves changes so editorial security is guaranteed; it's easy to configure user access and rights; and the BackBee core is very secure, so developers can make contributions fearlessly.\n\n\nIt\u2019s open source, which means it\u2019s constantly being tested and improved.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/#what-is-backbee", 
            "text": "BackBee is an open-source On-page Editing system (OES). It can be used to create websites with no prior technical knowledge.  What is an Open-page Editing Site?  Similar to content management system or CMS, an Open-page Editing Site (OES) is a software application to enter, edit and manage website with one major difference: The back office and front office is merged.  What\u2019s so interesting about this?  It's easier and more flexible than your usual CMS. With BackBee's On-page Editing System, you can work directly on the HTML page, the page that's visible to your users. You can drag and drop page elements and move them around as you wish, adding, deleting or changing text, photos or other page elements by simply clicking on the area in question.  The majority of the editorial functions require no back office. BackBee is the first OES to merge back office and front office.  What\u2019s this means?  In many content management systems, you have to shuttle between the back office \u2013 a utilitarian interface where you input your content \u2013 and a \u201cpreview\u201d mode. Only then may you\u00a0 see how the page will look on-line, as your user see it.  BackBee lets you directly do all your inputting and editing on the page that appears to your user. Thus you get an immediate and exact idea of what the final page will look like.  Many of BackBee's features are made possible by the unprecedented level to which it incorporates HTML5.", 
            "title": "What is BackBee ?"
        }, 
        {
            "location": "/#key-concepts", 
            "text": "It\u2019s unimaginably easy to use.  Responsive design is native to the app.  It\u2019s super flexible in terms of graphic design, workflow, SEO and user access.  Its secure, in several senses: it saves changes so editorial security is guaranteed; it's easy to configure user access and rights; and the BackBee core is very secure, so developers can make contributions fearlessly.  It\u2019s open source, which means it\u2019s constantly being tested and improved.", 
            "title": "Key concepts"
        }, 
        {
            "location": "/user-documentation/installation/", 
            "text": "User documentation\n\n\nInstallation of BackBee", 
            "title": "Installation of BackBee CMS"
        }, 
        {
            "location": "/user-documentation/installation/#user-documentation", 
            "text": "", 
            "title": "User documentation"
        }, 
        {
            "location": "/user-documentation/installation/#installation-of-backbee", 
            "text": "", 
            "title": "Installation of BackBee"
        }, 
        {
            "location": "/developper-documentation/requirements/", 
            "text": "Developper documentation\n\n\nRequirements for running BackBee CMS\n\n\nTo run BackBee CMS, your system needs to adhere to a list of requirements.\n\n\nBelow is the list of required and optional requirements.\n\n\nRequired\n\n\nBecause BackBee CMS is built on top of Symfony components, theses requirements are required.\n\n\n\n\nJSON\n needs to be enabled\n\n\nctype\n needs to be enabled\n\n\nmbstring\n needs to be enabled\n\n\nYour php configuration needs to have the date.timezone setting completed\n\n\n\n\nMore, PHP needs to be a minimum version of \nPHP 5.4.0\n.\n\n\nOptional\n\n\n\n\nYou (may) need to have the PHP-XML module installed\n\n\nYou (may) need to have at least version 2.6.21 of libxml\n\n\nYou (may) need to have PHP tokenizer module enabled\n\n\nYou (may) need to have iconv module enabled\n\n\nYou (may) need to have POSIX enabled (only on *nix)\n\n\nYou (may) need to have Intl installed with ICU 4+\n\n\nYou (may) need to have APC 3.0.17+ installed (or another opcode cache needs to be installed)\n\n\nphp configuration recommended settings:\n\n\n\n\nshort_open_tag = Off\n\nmagic_quotes_gpc = Off\n\nregister_globals = Off\n\nsession.auto_start = Off\n\n\n\n\nDoctrine2 (Database management)\n\n\nBecause we depend on Doctrine 2, you will need to have PDO installed. Additionally, you need to have the PDO driver installed for the database server you want to use.\nAlso, you need \nphp5-sqlite\n extension to be installed and enabled during the installation process.", 
            "title": "Requirements"
        }, 
        {
            "location": "/developper-documentation/requirements/#developper-documentation", 
            "text": "", 
            "title": "Developper documentation"
        }, 
        {
            "location": "/developper-documentation/requirements/#requirements-for-running-backbee-cms", 
            "text": "To run BackBee CMS, your system needs to adhere to a list of requirements.  Below is the list of required and optional requirements.  Required  Because BackBee CMS is built on top of Symfony components, theses requirements are required.   JSON  needs to be enabled  ctype  needs to be enabled  mbstring  needs to be enabled  Your php configuration needs to have the date.timezone setting completed   More, PHP needs to be a minimum version of  PHP 5.4.0 .  Optional   You (may) need to have the PHP-XML module installed  You (may) need to have at least version 2.6.21 of libxml  You (may) need to have PHP tokenizer module enabled  You (may) need to have iconv module enabled  You (may) need to have POSIX enabled (only on *nix)  You (may) need to have Intl installed with ICU 4+  You (may) need to have APC 3.0.17+ installed (or another opcode cache needs to be installed)  php configuration recommended settings:   short_open_tag = Off\n\nmagic_quotes_gpc = Off\n\nregister_globals = Off\n\nsession.auto_start = Off  Doctrine2 (Database management)  Because we depend on Doctrine 2, you will need to have PDO installed. Additionally, you need to have the PDO driver installed for the database server you want to use.\nAlso, you need  php5-sqlite  extension to be installed and enabled during the installation process.", 
            "title": "Requirements for running BackBee CMS"
        }, 
        {
            "location": "/developper-documentation/architecture/", 
            "text": "Developper documentation\n\n\nArchitecture\n\n\nBackBee CMS relies on many Symfony components and on Doctrine 2.\n\n\nThere is the list of components currently used by BackBee CMS:\n\n\n\n\nConfig   \n\n\nConsole   \n\n\nDebug   \n\n\nDependencyInjection   \n\n\nEventDispatcher\n\n\nExpression Language\n\n\nFilesystem\n\n\nHttpFoundation\n\n\nHttpKernel\n\n\nRouting\n\n\nSecurity ACL\n\n\nSecurity Core\n\n\nSecurity HTTP\n\n\nSerializer\n\n\nTranslation\n\n\nValidator\n\n\nYaml\n\n\n(Twig)\n\n\n\n\nBackBee CMS depends on a PHP application (the BackBee \"Core\") which provide a REST API to manage all the contents,\nthe users, the media and the security and to a REST Javascript client which provide to the final users a toolbar\nto ease the management of the contents.\n\n\nTo understand how BackBee CMS is built, take a look on this schema:", 
            "title": "Architecture"
        }, 
        {
            "location": "/developper-documentation/architecture/#developper-documentation", 
            "text": "", 
            "title": "Developper documentation"
        }, 
        {
            "location": "/developper-documentation/architecture/#architecture", 
            "text": "BackBee CMS relies on many Symfony components and on Doctrine 2.  There is the list of components currently used by BackBee CMS:   Config     Console     Debug     DependencyInjection     EventDispatcher  Expression Language  Filesystem  HttpFoundation  HttpKernel  Routing  Security ACL  Security Core  Security HTTP  Serializer  Translation  Validator  Yaml  (Twig)   BackBee CMS depends on a PHP application (the BackBee \"Core\") which provide a REST API to manage all the contents,\nthe users, the media and the security and to a REST Javascript client which provide to the final users a toolbar\nto ease the management of the contents.  To understand how BackBee CMS is built, take a look on this schema:", 
            "title": "Architecture"
        }, 
        {
            "location": "/developper-documentation/cookbooks/create_new_commands/", 
            "text": "CookBooks\n\n\nCreate new commands\n\n\nThe Console page of the Components section covers how to create a console application.\nThis cookbook article covers the creation of a command using BackBee Standard Edition.\n\n\nAutomatically Registering Commands\n\n\nTo make the console commands available automatically with BackBee, create a\n\nCommand\n directory inside your bundle and create a PHP file suffixed with\n\nCommand.php\n for each command that you want to provide. For example, if you\nwant to extend the DemoBundle to welcome you from the command line, create\n\nWelcomeCommand.php\n and add the following to it:\n\n\n// bundle/WelcomeBundle/Command/WelcomeCommand.php\nnamespace WelcomeBundle\\Command;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\nuse BackBee\\Console\\AbstractCommand;\n\nclass WelcomeCommand extends AbstractCommand\n{\n    protected function configure()\n    {\n        $this\n            -\nsetName('demo:welcome')\n            -\nsetDescription('Welcome someone')\n            -\naddArgument(\n                'name',\n                InputArgument::OPTIONAL,\n                'Who do you want to welcome?'\n            )\n            -\naddOption(\n                'yell',\n                null,\n                InputOption::VALUE_NONE,\n                'If set, the message will yell in uppercase letters'\n            )\n            -\nsetHelp(\nEOF\nThe \ninfo\n%command.name%\n/info\n command can welcome someone.\nWith the option ``yell``, the message will be displayed in uppercase letters.\nEOF;\n            )\n        ;\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    { \n        $text = 'Welcome '.$input-\ngetArgument('name');\n\n        if ($input-\ngetOption('yell')) {\n            $text = strtoupper($text);\n        }\n\n        $output-\nwriteln($text);\n    }\n}\n\n\n\n\nThis command will now automatically be available to run:\n\n\n    $ ./backbee demo:welcome Charles", 
            "title": "Create new commands"
        }, 
        {
            "location": "/developper-documentation/cookbooks/create_new_commands/#cookbooks", 
            "text": "", 
            "title": "CookBooks"
        }, 
        {
            "location": "/developper-documentation/cookbooks/create_new_commands/#create-new-commands", 
            "text": "The Console page of the Components section covers how to create a console application.\nThis cookbook article covers the creation of a command using BackBee Standard Edition.  Automatically Registering Commands  To make the console commands available automatically with BackBee, create a Command  directory inside your bundle and create a PHP file suffixed with Command.php  for each command that you want to provide. For example, if you\nwant to extend the DemoBundle to welcome you from the command line, create WelcomeCommand.php  and add the following to it:  // bundle/WelcomeBundle/Command/WelcomeCommand.php\nnamespace WelcomeBundle\\Command;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\nuse BackBee\\Console\\AbstractCommand;\n\nclass WelcomeCommand extends AbstractCommand\n{\n    protected function configure()\n    {\n        $this\n            - setName('demo:welcome')\n            - setDescription('Welcome someone')\n            - addArgument(\n                'name',\n                InputArgument::OPTIONAL,\n                'Who do you want to welcome?'\n            )\n            - addOption(\n                'yell',\n                null,\n                InputOption::VALUE_NONE,\n                'If set, the message will yell in uppercase letters'\n            )\n            - setHelp( EOF\nThe  info %command.name% /info  command can welcome someone.\nWith the option ``yell``, the message will be displayed in uppercase letters.\nEOF;\n            )\n        ;\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    { \n        $text = 'Welcome '.$input- getArgument('name');\n\n        if ($input- getOption('yell')) {\n            $text = strtoupper($text);\n        }\n\n        $output- writeln($text);\n    }\n}  This command will now automatically be available to run:      $ ./backbee demo:welcome Charles", 
            "title": "Create new commands"
        }, 
        {
            "location": "/developper-documentation/cookbooks/customize_error_pages/", 
            "text": "CookBooks\n\n\nCustomize error pages\n\n\nIn BackBee, thanks to Symfony Debug component all errors are treated as exceptions: pages not found or access unauthorized,\neach error is triggered by throwing an exception in your code.\n\n\nAlso, if your are in \"Developper Mode\" BackBee will catch and display a \nbetter\n exception page with a lot of informations\nto help you discover the issue:\n\n\n\n\nIn production, your visitors will see the nice error page provided by BackBee:\n\n\n\n\nError pages for the production environment can be customized in two ways depending on your needs:\n\n\n\n\nIf you just want to design the contents and styles of the error pages, you can set your own error templates\n\n\nIf you need total control of exception handling to execute your own logic, create your own ExceptionListener on \nkernel.exception\n event.\n\n\n\n\nUse your own default templates\n\n\nWhen the error page loads, an internal ExceptionListener is used to render a Twig template to show the user.\n\n\nThis ExceptionListener uses the HTTP status code, the \ndebug\n parameter and the following logic to determine the template filename:\n\n\nBackBee provide core templates which are located into \nvendor/backbee/BackBee/Resources/layouts/error\n.\nIf the template for the status code doesn't exist, this is the default template which is used instead.\n\n\nIn BackBee Standard edition, theses templates are already overriden in the \nToolbarBundle\n, theses templates are located\ninto \nvendor/backbee/toolbar-bundle/Resources/layouts/error\n folder.\n\n\nIf you want to override theses templates, your application might look like this:\n\n\nrepository/\n    Resources/\n        layouts/\n            error/\n                404.phtml\n                500.twig\n                default.phtml\n\n\n\n\nIn case you need them, the ExceptionController passes some information to the error template via the error variable which act as the original PHP exception so you can access the HTTP status code and exception message.", 
            "title": "Customize error pages"
        }, 
        {
            "location": "/developper-documentation/cookbooks/customize_error_pages/#cookbooks", 
            "text": "", 
            "title": "CookBooks"
        }, 
        {
            "location": "/developper-documentation/cookbooks/customize_error_pages/#customize-error-pages", 
            "text": "In BackBee, thanks to Symfony Debug component all errors are treated as exceptions: pages not found or access unauthorized,\neach error is triggered by throwing an exception in your code.  Also, if your are in \"Developper Mode\" BackBee will catch and display a  better  exception page with a lot of informations\nto help you discover the issue:   In production, your visitors will see the nice error page provided by BackBee:   Error pages for the production environment can be customized in two ways depending on your needs:   If you just want to design the contents and styles of the error pages, you can set your own error templates  If you need total control of exception handling to execute your own logic, create your own ExceptionListener on  kernel.exception  event.   Use your own default templates  When the error page loads, an internal ExceptionListener is used to render a Twig template to show the user.  This ExceptionListener uses the HTTP status code, the  debug  parameter and the following logic to determine the template filename:  BackBee provide core templates which are located into  vendor/backbee/BackBee/Resources/layouts/error .\nIf the template for the status code doesn't exist, this is the default template which is used instead.  In BackBee Standard edition, theses templates are already overriden in the  ToolbarBundle , theses templates are located\ninto  vendor/backbee/toolbar-bundle/Resources/layouts/error  folder.  If you want to override theses templates, your application might look like this:  repository/\n    Resources/\n        layouts/\n            error/\n                404.phtml\n                500.twig\n                default.phtml  In case you need them, the ExceptionController passes some information to the error template via the error variable which act as the original PHP exception so you can access the HTTP status code and exception message.", 
            "title": "Customize error pages"
        }
    ]
}